// Automatic FlutterFlow imports
import '/backend/schema/structs/index.dart';
import '/backend/schema/enums/enums.dart';
import '/backend/supabase/supabase.dart';
import '/backend/sqlite/sqlite_manager.dart';
import '/actions/actions.dart' as action_blocks;
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import 'index.dart'; // Imports other custom widgets
import '/custom_code/actions/index.dart'; // Imports custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom widget code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

// editor_wrapper.dart
//

// editor_wrapper.dart
import 'package:journal_core/src/widgets/editor_widget.dart';
import 'package:journal_core/src/models/journal.dart';

/// editor_wrapper.dart
class EditorWrapper extends StatefulWidget {
  const EditorWrapper({
    super.key,
    this.width,
    this.height,
    required this.onSave,
    required this.onBack,
    required this.onDelete,
    this.journal,
  });

  final double? width;
  final double? height;
  final Future Function(JournalStruct updatedJournal) onSave;
  final Future Function() onBack;
  final Future Function(String journalId) onDelete;
  final JournalStruct? journal;

  @override
  State<EditorWrapper> createState() => _EditorWrapperState();
}

class _EditorWrapperState extends State<EditorWrapper> {
  @override
  Widget build(BuildContext context) {
    final journal = widget.journal != null
        ? Journal(
            id: widget.journal!.id ?? '',
            title: widget.journal!.title ?? '',
            createdAt: widget.journal!.createdat ??
                DateTime.now().millisecondsSinceEpoch,
            lastModified: widget.journal!.lastmodified ??
                DateTime.now().millisecondsSinceEpoch,
            content: widget.journal!.content != null
                ? loadDocumentFromJson(widget.journal!.content!)
                : Document.blank(),
          )
        : Journal(
            id: '',
            title: '',
            createdAt: DateTime.now().millisecondsSinceEpoch,
            lastModified: DateTime.now().millisecondsSinceEpoch,
            content: Document.blank(),
          );

    return EditorWidget(
      journal: journal,
      onSave: (updatedJournal, contentJson) async {
        final updatedJournalStruct = JournalStruct(
          id: updatedJournal.id,
          title: updatedJournal.title,
          createdat: updatedJournal.createdAt,
          lastmodified: updatedJournal.lastModified,
          content: contentJson,
        );
        await widget.onSave(updatedJournalStruct);
      },
      onBack: widget.onBack,
      onDelete: widget.onDelete,
    );
  }
} 